import numpy as np

EXPLICIT_THREEJ = [  # these comparisons come from Mathematica, which should be trustworthy
    ((0, 0, 0, 0, 0, 0), 1),
    ((1, 1, 2, 0, 0, 0), np.sqrt(2 / 15)),
    ((3, 4, 5, 1, 1, -2), 8 * np.sqrt(2 / 715) / 3),
    ((3, 5, 4, 1, 1, -2), 43 / (6 * np.sqrt(5005))),
    ((6, 5, 4, 3, -2, -1), 2 / np.sqrt(1001)),
    ((3, 3, 0, 2, -2, 0), -1 / np.sqrt(7)),
    ((3, 3, 0, 2, 5, 0), 0),
    ((1, 1, 0, 0, 0, 0), -1 / np.sqrt(3)),
    ((1, 0, 1, 0, 0, 0), -1 / np.sqrt(3)),
    ((1, 2, 2, 0, -1, 1), 1 / np.sqrt(30)),
    ((2, 2, 3, -1, -1, 2), 0),
    ((600, 700, 734, -430, 100, 330), -0.001_089_332_535_188_02),
    ((850, 692, 734, 200, 150, -350), -0.000_099_384_107_595_063_7),
    ((555, 1110, 555, -555, 1110, -555), 1 / np.sqrt(2221)),
    ((555, 1110, 555, 555, -1110, 555), 1 / np.sqrt(2221)),
    ((1000, 1110, 555, -555, 1110, -555), 3.973_476_519_349_14e-101),
    ((60, 100, 50, 50, -99, 49), 0.010_637_806_668_943_5),
    ((92, 100, 50, 50, -99, 49), 9.732_739_614_228_57e-10),
    ((1, 540, 540, 0, -540, 540), -6 * np.sqrt(8_772_315) / 584_821),
    ((4, 555, 555, 0, 0, 0), -np.sqrt(1_587_016_654 / 12_538_035_327_741)),
    ((482, 555, 555, 0, 0, 0), 0.001_148_224_763_316_79),
    ((481, 555, 555, 0, 0, 0), 0),
    ((5, 555, 555, 0, 0, 0), 0),
    ((1108, 555, 555, 1108, -554, -554), -np.sqrt(1109 / 4_919_523)),
    ((1109, 555, 555, 1108, -554, -554), 0),
    ((1110, 555, 555, 1108, -554, -554), np.sqrt(1110 / 4_928_399)),
    (
        (3, 3, 2, -2, 2, 0),
        0,
    ),  # non-trivial zeros from https://rmf.smf.mx/pdf/rmf/31/4/31_4_575.pdf
    ((5, 4, 2, 3, -2, -1), 0),
    ((6, 5, 3, 5, -4, -1), 0),
    ((5, 5, 4, 4, -3, -1), 0),
    ((6, 6, 3, 5, -5, 0), 0),
    ((8, 6, 3, 6, -4, -2), 0),
    ((9, 8, 2, 5, -4, -1), 0),
    ((8, 6, 5, 6, -5, -1), 0),
    ((9, 7, 4, 8, -6, -2), 0),
    ((8, 6, 6, 5, -5, 0), 0),
    ((11, 10, 2, 6, -5, -1), 0),
    ((11, 9, 3, 4, -3, -1), 0),
    ((11, 8, 5, 8, -4, -4), 0),
    ((10, 9, 5, 4, 0, -4), 0),
    ((12, 9, 5, 11, -8, -3), 0),
    ((11, 9, 6, 9, -8, -1), 0),
    ((11, 9, 6, 6, -1, -5), 0),
    ((10, 9, 7, -7, 8, -1), 0),
    ((13, 12, 2, 7, -6, -1), 0),
    ((11, 10, 6, 9, -9, 0), 0),
    ((6, 4, 4, 2, -2, 0), 0),
    ((9, 8, 3, 4, -4, 0), 0),
    ((11, 8, 5, 8, -6, -2), 0),
    ((8, 8, 8, 6, -5, -1), 0),
    ((9, 9, 7, 5, 0, -5), 0),
    ((11, 9, 6, 0, 1, -1), 0),
    ((9, 8, 8, -5, 4, 1), 0),
    ((45, 540, 540, 0, -539, 539), -0.010_699_460_423_740_8),
    ((46, 540, 540, 0, -539, 539), 0.011_206_297_808_708_9),
    ((2, 5, 4, 0, 0, 0), 0),  # all-m-zero shortcuts with l not equal
    ((3, 5, 4, 0, 0, 0), 2 * np.sqrt(5 / 1001)),
    ((5, 12, 13, 0, 0, 0), -np.sqrt(286 / 62031)),
    ((2200, 1000, 1200, 0, 0, 0), 0.002_342_662_799_784_58),
    ((22000, 10000, 12000, 0, 0, 0), 0.000_416_665_818_913_591),
    ((22001, 10000, 12000, 0, 0, 0), 0),
    ((22000, 10000, 12000, 0, -5, 5), 0.000_415_712_097_008_931),
    ((6, 5, 6, 3, 0, -3), np.sqrt(11 / 1547) / 2),
    ((1, 1, 2, 2, 0, -2), 0),
    ((1, 1, 5, 0, 0, 0), 0),
    ((1, 1, 6, 0, 0, 0), 0),
    ((1, 1, 0.5, 0, 0, 0), 0),
]
